---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

let { Content, headings } = await post.render();

interface Heading {
  slug: string;
  text: string;
  children: Heading[];
}

const nestedHeadings: Heading[] = [
  { slug: headings[0].slug, text: headings[0].text, children: [] },
];
const history: Heading[][] = [];
let level: Heading[] = nestedHeadings;

for (let i = 1; i < headings.length; i++) {
  const prev = headings[i - 1];
  const curr = headings[i];

  if (curr.depth > prev.depth) {
    history.push(level);
    level = level[level.length - 1].children;
  } else if (curr.depth < prev.depth) {
    level = history.pop()!;
  }

  level.push({ slug: curr.slug, text: curr.text, children: [] });
}
---

<Layout title={post.data.title} class="py-20">
  <!-- Title -->
  <div class="mx-auto max-w-prose">
    <div class="mobile:px-8">
      <h1>{post.data.title}</h1>
      <p>
        {post.data.pubDate.toLocaleDateString("en-AU")}

        {
          post.data.updatedDate && (
            <em>
              (updated {post.data.updatedDate.toLocaleDateString("en-AU")})
            </em>
          )
        }
      </p>
    </div>
  </div>
  <div
    class="flex justify-center mobile:mx-auto mobile:max-w-prose mobile:flex-col mobile:px-8"
  >
    <!-- Sidebar -->
    <div class="basis-[21.5%] desktop:max-w-sm">
      <aside class="desktop:sticky desktop:top-8 desktop:ml-4 desktop:mr-12">
        <section>
          {
            nestedHeadings.length > 0 && (
              <>
                <h3>Contents</h3>
                <ul>
                  {nestedHeadings.map((heading: Heading) => (
                    <li>
                      <a href={`#${heading.slug}`}>{heading.text}</a>
                      {heading.children.length > 0 && (
                        <ul>
                          {heading.children.map((child: Heading) => (
                            <li>
                              <a href={`#${child.slug}`}>{child.text}</a>
                            </li>
                          ))}
                        </ul>
                      )}
                    </li>
                  ))}
                </ul>
              </>
            )
          }
          <section class="my-4 hidden desktop:block">
            <a href="/">← Home</a>
          </section>
        </section>
      </aside>
    </div>
    <!-- Main content -->
    <div class="max-w-prose basis-[57%]">
      <article>
        <Content />
        <section class="desktop:hidden">
          <a href="/">← Home</a>
        </section>
      </article>
    </div>
    <!-- Sidenotes -->
    <div class="max-w-sm basis-[21.5%]"></div>
  </div>
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const sidenotes = document.getElementsByClassName("sidenote");
    const headings = document.querySelectorAll<HTMLElement>("h2, h3");

    // Why does this use 32??
    function touching(rect1: DOMRect, rect2: DOMRect, space = 0) {
      return (
        rect1.top <= rect2.bottom &&
        rect1.bottom + space >= rect2.top &&
        rect1.left <= rect2.right &&
        rect1.right >= rect2.left
      );
    }

    // Manually collapse margins between stacked sidenotes
    function collapseMargins() {
      for (let i = 0; i < sidenotes.length - 1; i++) {
        const a = sidenotes[i].getBoundingClientRect();
        for (let j = i + 1; j < sidenotes.length; j++) {
          const b = sidenotes[j].getBoundingClientRect();
          // Touching if within 32px (2rem)
          if (touching(a, b, 32)) {
            sidenotes[j].classList.add("!mt-0");
          } else {
            sidenotes[j].classList.remove("!mt-0");
          }
        }
      }
    }

    // Manually expand margins between sidenotes and titles
    function expandTitles() {
      for (const heading of headings) {
        let shouldReset = true;
        const a = heading.getBoundingClientRect();
        for (const sidenote of sidenotes) {
          const b = sidenote.getBoundingClientRect();
          const size = b.height;

          if (touching(a, b)) {
            shouldReset = false;
            heading.style.setProperty("padding-top", `calc(${size}px + 1rem)`);
          }
        }

        if (shouldReset) {
          heading.style.removeProperty("padding-top");
        }
      }
    }

    for (let i = 1; i < sidenotes.length + 1; i++) {
      const toggle = document.getElementById(`sidenote-${i}`);
      toggle?.addEventListener("change", collapseMargins);
      toggle?.addEventListener("change", expandTitles);
    }

    collapseMargins();
    expandTitles();

    window.addEventListener("resize", collapseMargins);
    window.addEventListener("resize", expandTitles);
  });
</script>
